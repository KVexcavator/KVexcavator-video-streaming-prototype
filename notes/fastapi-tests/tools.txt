вариант стека для тестирования FastAPI с Mongo (Beanie) и авторизацией:

pytest pytest-asyncio httpx faker factory_boy beanie motor asgi-lifespan

Минимальный conftest.py для тестов FastAPI + Beanie

```python
import pytest
from httpx import AsyncClient
from app.main import app
from motor.motor_asyncio import AsyncIOMotorClient
from beanie import init_beanie
from app.models import User
import asyncio

TEST_DB_URL = "mongodb://localhost:27017/test_db"

@pytest.fixture(scope="session")
def event_loop():
    return asyncio.get_event_loop()

@pytest.fixture(scope="session", autouse=True)
async def setup_db():
    client = AsyncIOMotorClient(TEST_DB_URL)
    await init_beanie(database=client.get_default_database(), document_models=[User])
    yield
    client.drop_database("test_db")

@pytest.fixture
async def client():
    async with AsyncClient(app=app, base_url="http://testserver") as ac:
        yield ac
```
factories.py — генерация юзеров (аналог FactoryBot)

```python
from app.models import User
from faker import Faker
from services import AuthHandler

faker = Faker()
auth_handler = AuthHandler()

async def create_test_user():
    user = User(
        username=faker.user_name(),
        email=faker.email(),
        password=auth_handler.get_password_hash("password123")
    )
    await user.insert()
    return user
```
Пример теста логина

```python
import pytest
from app.factories import create_test_user

@pytest.mark.asyncio
async def test_login(client):
    user = await create_test_user()
    response = await client.post("/login", json={
        "username": user.username,
        "password": "password123"
    })
    assert response.status_code == 200
    data = response.json()
    assert "token" in data
```
Изоляция: сбрасываем базу между тестами
в conftest.py:
```python
@pytest.fixture(autouse=True)
async def clean_users():
    yield
    await User.find_all().delete()
```

Можно использовать .env.test и загружать переменные через dotenv:

```python
from dotenv import load_dotenv
load_dotenv(".env.test")
```

Пример теста регистрации пользователя

```python
# tests/test_users.py
import pytest
from httpx import AsyncClient
from app.main import app
from app.models import User
from beanie import init_beanie
from motor.motor_asyncio import AsyncIOMotorClient
import asyncio

# Используем отдельную тестовую базу
TEST_DB_URL = "mongodb://localhost:27017"
TEST_DB_NAME = "test_db"

@pytest.fixture(scope="session")
def event_loop():
    return asyncio.get_event_loop()

@pytest.fixture(scope="function", autouse=True)
async def init_test_db():
    client = AsyncIOMotorClient(TEST_DB_URL)
    db = client[TEST_DB_NAME]
    await init_beanie(database=db, document_models=[User])
    
    # Очистить коллекцию перед каждым тестом
    await User.find_all().delete()
    yield
    await User.find_all().delete()

@pytest.mark.asyncio
async def test_register_user():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        payload = {
            "username": "testuser",
            "password": "secret",
            "email": "test@mail.com"
        }
        response = await ac.post("/register", json=payload)
        assert response.status_code == 200
        data = response.json()
        assert data["username"] == "testuser"
        assert data["email"] == "test@mail.com"
```

Factory Boy 

```python
# factories.py
import factory
from app.models import User

class UserFactory(factory.Factory):
    class Meta:
        model = User

    username = factory.Faker("user_name")
    email = factory.Faker("email")
    password = "hashedpassword"
```
Запуск тестов

```bash
pytest -v
pytest -v --disable-warnings
```
для 
docker-compose exec register pytest
alias test-register='docker-compose exec register pytest'



ещё можно
Покрытие кода (pytest-cov)
Проверка схемы (pydantic валидации)
Автофикстуры для создания токенов, пользователей и т.д.
Использование Docker + testcontainers для поднятия настоящего MongoDB
сделать авторизацию токеном в тестах,
покрыть login, /me и другие маршруты

